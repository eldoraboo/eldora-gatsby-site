{"version":3,"file":"component---src-pages-blog-js-f3c77ce826da4d1751bc.js","mappings":"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","sources":["webpack://taniarascia.com/./src/components/Post.js","webpack://taniarascia.com/./src/components/Posts.js","webpack://taniarascia.com/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://taniarascia.com/./src/components/BlogSidebar.js","webpack://taniarascia.com/./src/utils/hooks/useGetTaxonomies.js","webpack://taniarascia.com/./src/components/SidebarLayout.js","webpack://taniarascia.com/./src/pages/blog.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nexport const Post = ({ node, prefix, newspaper }) => {\n  let formattedDate\n\n  if (node.date) {\n    const dateArr = node.date.split(' ')\n    dateArr.pop()\n\n    dateArr[0] = dateArr[0].slice(0, 3)\n    formattedDate = dateArr.join(' ').slice(0, -1)\n  }\n\n  return (\n    <Link\n      to={prefix ? `/${prefix}${node.slug}` : node.slug}\n      key={node.id}\n      className=\"post\"\n    >\n      {newspaper ? (\n        <>\n          <time>{formattedDate}</time>\n          <h3>{node.title}</h3>\n        </>\n      ) : (\n        <>\n          <h3>{node.title}</h3>\n          <time style={{ marginLeft: 'auto' }}>{formattedDate}</time>\n        </>\n      )}\n    </Link>\n  )\n}\n","import React, { useMemo } from 'react'\n\nimport { Post } from './Post'\n\nexport const Posts = ({\n  data = [],\n  showYears,\n  query,\n  prefix,\n  hideDate,\n  yearOnly,\n  ...props\n}) => {\n  const postsByYear = useMemo(() => {\n    const collection = {}\n\n    data.forEach((post) => {\n      const year = post.date?.split(', ')[1]\n\n      collection[year] = [...(collection[year] || []), post]\n    })\n\n    return collection\n  }, [data])\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  if (showYears) {\n    return years.map((year) => (\n      <section key={year} className=\"segment\">\n        <h2 className=\"year\">{year}</h2>\n        <div className=\"posts\">\n          {postsByYear[year].map((node) => (\n            <Post key={node.id} node={node} query={query} prefix={prefix} />\n          ))}\n        </div>\n      </section>\n    ))\n  } else {\n    return (\n      <div className={props.newspaper ? 'posts newspaper' : 'posts'}>\n        {data.map((node) => (\n          <Post\n            key={node.id}\n            node={node}\n            query={query}\n            prefix={prefix}\n            hideDate={hideDate}\n            yearOnly={yearOnly}\n            {...props}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport { slugify } from '../utils/helpers'\nimport { useGetTaxonomies } from '../utils/hooks/useGetTaxonomies'\n\nexport const BlogSidebar = () => {\n  const data = useGetTaxonomies()\n  const categories = data.categories.group\n  const tags = data.tags.group\n\n  return (\n    <aside className=\"post-sidebar\">\n      <div className=\"post-sidebar-card\">\n        <h2>Categories</h2>\n        <div className=\"list\">\n          {categories\n            .filter((category) => category.name !== 'Highlight')\n            .map((category) => {\n              return (\n                <Link\n                  key={category.name}\n                  to={`/categories/${slugify(category.name)}`}\n                  className=\"category\"\n                  activeClassName=\"active\"\n                >\n                  <div className=\"name\">{category.name}</div>\n                  <div className=\"count\">{category.totalCount}</div>\n                </Link>\n              )\n            })}\n        </div>\n      </div>\n\n      <div className=\"post-sidebar-card\">\n        <h2>Tags</h2>\n        <div className=\"tags\">\n          {tags.map((tag) => {\n            return (\n              <Link\n                key={tag.name}\n                to={`/tags/${slugify(tag.name)}`}\n                className=\"tag\"\n                activeClassName=\"active\"\n              >\n                {tag.name}\n              </Link>\n            )\n          })}\n        </div>\n      </div>\n    </aside>\n  )\n}\n","import { useStaticQuery, graphql } from 'gatsby'\n\nexport const useGetTaxonomies = () => {\n  const data = useStaticQuery(graphql`\n    query TaxonomyQuery {\n      tags: allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          name: fieldValue\n          totalCount\n        }\n      }\n\n      categories: allMarkdownRemark {\n        group(field: frontmatter___categories) {\n          name: fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n\n  return data\n}\n","import React from 'react'\n\nimport { BlogSidebar } from './BlogSidebar'\n\nexport const SidebarLayout = ({ children }) => {\n  return (\n    <section className=\"container markdown-content\">\n      <div className=\"grid\">\n        <div className=\"article-content\">{children}</div>\n        <div className=\"sidebar-content\">\n          <BlogSidebar />\n        </div>\n      </div>\n    </section>\n  )\n}\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport { Layout } from '../components/Layout'\nimport { Posts } from '../components/Posts'\nimport { SEO } from '../components/SEO'\nimport { SidebarLayout } from '../components/SidebarLayout'\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport config from '../utils/config'\n\nexport default function Blog({ data }) {\n  const posts = data.posts.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n  const title = 'Writing'\n  const description = 'Notes & tutorials'\n\n  return (\n    <div>\n      <Helmet title={`${title} | ${config.siteTitle}`} />\n      <SEO customDescription={description} />\n\n      <SidebarLayout>\n        <header className=\"hero\">\n          <h1>{title}</h1>\n        </header>\n        <Posts data={simplifiedPosts} showYears />\n      </SidebarLayout>\n    </div>\n  )\n}\n\nBlog.Layout = Layout\n\nexport const blogQuery = graphql`\n  query BlogQuery {\n    posts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { template: { eq: \"post\" } } }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["Post","formattedDate","node","prefix","newspaper","date","dateArr","split","pop","slice","join","Link","to","slug","key","id","className","title","style","marginLeft","Posts","data","showYears","query","hideDate","yearOnly","props","source","excluded","i","target","sourceKeys","Object","keys","length","indexOf","postsByYear","useMemo","collection","forEach","post","year","years","reverse","map","BlogSidebar","useStaticQuery","categories","group","tags","filter","category","name","slugify","activeClassName","totalCount","tag","SidebarLayout","children","Blog","posts","edges","simplifiedPosts","getSimplifiedPosts","config","customDescription","Layout"],"sourceRoot":""}